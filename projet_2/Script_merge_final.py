# -*- coding: utf-8 -*-
"""Script_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c_MjUvqvL2BmTJ9nJTyHAPKYJCu-n0qs
"""

import pandas as pd
import numpy as np

"""# Data frame film oriented"""

#'tconst', 'isAdult', 'startYear',
#'runtimeMinutes', 'genre_1', 'genre_2', 'genre_3', 'directors', 'title',
#'averageRating', 'numVotes'

"""## Title_basics"""

# Import bdd
df_title_basics = df_title_basics = pd.read_csv("https://datasets.imdbws.com/title.basics.tsv.gz", sep = '\t')

# Delete column "endYear"
df_title_basics.drop("endYear", axis=1, inplace=True)

# Delete rows where genre != "movie"
df_title_basics = df_title_basics.loc[df_title_basics["titleType"] == "movie", :]

# We can now delete "titleType" column
df_title_basics.drop("titleType", axis=1, inplace=True)

# Checking Nan values
df_title_basics.isna().sum()
## No Nan values

# Checking columns type
def get_unique_column_types(df, col_name):
    """
    Returns a list of the unique types of values in the specified column of the DataFrame.

    Parameters:
    df (pandas.DataFrame): The DataFrame containing the column.
    col_name (str): The name of the column to check.

    Returns:
    list: A list of the unique types of values in the column.
    """
    unique_types = df[col_name].apply(type).unique()
    return unique_types

# List of column names in the DataFrame
column_names = df_title_basics.columns.tolist()

# Iterate over each column name and print the unique types of values in that column
for col_name in column_names:
    types = get_unique_column_types(df_title_basics, col_name)
    print(f"The column '{col_name}' has the following unique types of values: {types}")

# Convert "startYear" as int for using as condition
# Delete rows where "starYear" value is not convertible to int

# convert everything to numeric value and give Nan values when it's not possible
df_title_basics["startYear"] = pd.to_numeric(df_title_basics["startYear"], errors='coerce')
df_title_basics = df_title_basics.dropna(subset=["startYear"])
# convert to int because I don't want floats
df_title_basics["startYear"] = df_title_basics["startYear"].astype(int)

# Split the column "genres"
split_genre = df_title_basics["genres"].str.split(",", expand=True)
split_genre.rename(columns={0 : "genre_1", 1 : "genre_2", 2 : "genre_3"}, inplace=True)

df_title_basics = pd.concat([df_title_basics, split_genre], axis=1)

# Drop column "genres" because unusable
df_title_basics.drop("genres", axis=1, inplace=True)

# Check duplicates
df_title_basics.duplicated().sum()
## No duplicates

"""## Merge "directors" column from title_crew"""

df_title_crew = pd.read_csv("https://datasets.imdbws.com/title.crew.tsv.gz", sep = '\t')

# Check duplicates on Key 
print(df_title_crew["tconst"].duplicated().sum())
print(df_title_basics["tconst"].duplicated().sum())

# Merge column "directors" drom df_title_crew on df_title_basics with inner join to avoid duplicates
df_title_basics = df_title_basics.merge(df_title_crew[["directors", "tconst"]], how="inner", on="tconst")

"""## Merge "title" and "region" column from title_akas"""

df_title_akas = pd.read_csv("https://datasets.imdbws.com/title.akas.tsv.gz", sep = '\t')

# Check Nan values
df_title_akas.isna().sum()
# Some Nan values

# Keep only the movies from "region" == FR
df_title_akas = df_title_akas.loc[df_title_akas["region"] == "FR", ["titleId", "title", "region"]]

# Merge the column "titleId", "title" and "region" on df_title_basics with inner join
df_title_basics = df_title_basics.merge(df_title_akas[["titleId", "title", "region"]], how="inner",
                                        left_on="tconst", right_on="titleId")

# Drop duplicates
df_title_basics.drop_duplicates(keep="first", subset="tconst", inplace=True)

# Check duplicates
df_title_basics.duplicated().sum()
## No duplicates on "tconst"

# We can drop "titleId" because it was used for join, and "region" because everything is FR
df_title_basics = df_title_basics.drop(["titleId", "region"], axis=1)

"""## Merge "averageRating" and "numvotes" columns from title_ratings"""

df_title_ratings = pd.read_csv("https://datasets.imdbws.com/title.ratings.tsv.gz", sep = '\t')

# Check duplicates on tconst
df_title_ratings["tconst"].duplicated().sum()
## No dupicates

# Check Nan values
df_title_ratings.isna().sum()
## No Nan values

# Merge the column "averageRating" and "numVotes" on df_title_basics
df_title_basics = df_title_basics.merge(df_title_ratings[["tconst", "averageRating", "numVotes"]], 
                                        how="inner", on="tconst")

# Drop "primaryTitle" and "originalTitle" because no use
df_title_basics.drop(["primaryTitle", "originalTitle"], axis=1, inplace=True)

# Check duplicates on "tconst"
df_title_basics["tconst"].duplicated().sum()
## No duplicates

"""## Delete 'Adult' genre to not get porn movies"""

mask = (df_title_basics['genre_1'] == 'Adult')
mask_2 = (df_title_basics['genre_2'] == 'Adult')
mask_3 = (df_title_basics['genre_3'] == 'Adult')

df_title_basics = df_title_basics.drop(df_title_basics[mask].index)
df_title_basics = df_title_basics.drop(df_title_basics[mask_2].index)
df_title_basics = df_title_basics.drop(df_title_basics[mask_3].index)



"""## Merge "primaryName" columns to get directors name"""

# Import bdd
df_name_basics = pd.read_csv("https://datasets.imdbws.com/name.basics.tsv.gz", sep = '\t')

df_title_basics = df_title_basics.merge(df_name_basics[["nconst", "primaryName"]], 
                                        how="inner", left_on="directors", right_on="nconst")
df_title_basics.drop("nconst", axis=1, inplace=True)

"""## Export my film oriented data frame"""

df_title_basics.to_csv('film_oriented.csv')

"""# Data frame actor oriented"""

#'nconst', 'category', 'primaryName', 'film_1', 'film_2', 'film_3',
#'film_4', 'film_5', 'film_6'

"""## title principals"""

# Import bdd
df_title_principals = pd.read_csv("https://datasets.imdbws.com/title.principals.tsv.gz", sep = '\t')

# Delete "ordering", "job", "characters" because no use of it
df_title_principals.drop(["tconst", "ordering", "job", "characters"], axis=1, inplace=True)

# Delete all rows that are not "actor" or "actress"
df_title_principals = df_title_principals.loc[df_title_principals["category"].isin(["actor", "actress"]), :]

# drop duplicates
df_title_principals.drop_duplicates(subset="nconst", keep="first", inplace=True)

# Check duplicates
df_title_principals["nconst"].duplicated().sum()
## No duplicates on "nconst"

"""## Merge "primaryName" and "knownForTitles" columns from name basics"""

# Import bdd
df_name_basics = pd.read_csv("https://datasets.imdbws.com/name.basics.tsv.gz", sep = '\t')

# Keep only "nconst" and "primaryName"
df_name_basics.drop(["birthYear", "deathYear", "primaryProfession"], axis=1, inplace=True)

# Split "knownForTitles" column to make it usable
split_knownForTitles = df_name_basics["knownForTitles"].str.split(",", expand=True)

# Rename columns
split_knownForTitles.rename(columns={0 : "film_1", 1 : "film_2", 2 : "film_3",
                                     3 : "film_4", 4 : "film_5", 5 : "film_6"}, inplace=True)

# Add splited column in df_name_basics
df_name_basics = pd.concat([df_name_basics, split_knownForTitles], axis=1)

# Delete "knownForTitles" because not usefull anymore
df_name_basics.drop("knownForTitles", axis=1, inplace=True)

# Merge "primaryName" and splited "knownForTitles" on df_title_principals
df_title_principals = df_title_principals.merge(df_name_basics, how="inner", on="nconst")

df_name_basics

"""## Export my actor oriented data frame"""

df_title_principals.to_csv('actor_oriented.csv')

"""# Visualisations & KPIS"""

#Import the librairies
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

df_actor = df_title_principals
df_movie = df_title_basics

"""## AverageRating mean by movies genre"""

#AverageRating mean by movie genre, round with 1 decimal
grouped_data = df_movie.groupby('genre_1')

weighted_avg = grouped_data.apply(lambda x: np.average(x['averageRating'], weights=x['numVotes']))

avg_rating_genre_sorted = weighted_avg.sort_values(ascending=False)

avg_rating_genre_sorted

#AverageRating mean, round with 1 decimal, using the weighted average
avg_rating_movie = np.average(df_movie['averageRating'], weights=df_movie['numVotes'])

round(avg_rating_movie, 1)


#Creating viz

plt.bar(avg_rating_genre_sorted.index, avg_rating_genre_sorted)

plt.axhline(avg_rating_movie, color='red', linestyle='-', label='AverageRating mean')


plt.title('Moyenne des évaluations par genre')
plt.xlabel('Genres')
plt.ylabel('Moyenne des évaluations')


plt.xticks(rotation=90)


plt.show()

df_movie.head()

"""## Nombre films produits par années et par genre"""

##Creating viz

films_per_genre_prod = df_movie.groupby('genre_1')['startYear'].count()

films_per_genre_prod = films_per_genre_prod.sort_values(ascending = False)



plt.bar(films_per_genre_prod.index, films_per_genre_prod)


plt.title('Nombre de films par genre produits chaque année')
plt.xlabel('Genres')
plt.ylabel('Nombre de films')


plt.xticks(rotation=90)


plt.show()

"""## Films les mieux notés tout genre confondus """

#Creating viz

from IPython.display import display
pd.set_option('display.max_rows', None)

# Trier les films par note moyenne en ordre décroissant
q3_numVotes = df_movie['numVotes'].quantile(0.75)
df_filtered = df_movie.loc[df_movie['numVotes'] >= q3_numVotes]
df_top_50_all_genres = df_filtered.sort_values('averageRating', ascending=False).head(50)

df_top_50_selected = df_top_50_all_genres.loc[:, ['title', 'averageRating', 'numVotes','tconst', 'startYear', 'genre_1']]
display(df_top_50_selected)

"""## Films les mieux notés par genre"""

#Creating viz

from IPython.display import display
pd.set_option('display.max_rows', None)

# Trier les films par genre et note moyenne en ordre décroissant pour chaque groupe
df_top_5_by_genre = df_filtered.groupby('genre_1').apply(lambda x: x.nlargest(5, 'numVotes')).reset_index(drop=True)

df_top_5_selected = df_top_5_by_genre.loc[:, ['title', 'averageRating', 'numVotes', 'tconst', 'startYear', 'genre_1']]
display(df_top_5_selected)

"""## Acteurs présents dans les films les + aimés"""

## Definir un nombre de vote pour dire qu'un film est populaire
q3_numVotes = df_movie['numVotes'].quantile(0.75)

## Keep only films with numVotes greater than 3rd quantile 
df_movie = df_movie.loc[df_movie["numVotes"] >= q3_numVotes, :]

## Sorted df on average rating desc
df_movie_averageRating_desc = df_movie.sort_values(by='averageRating', ascending=False)

## TOP 10 of best rated films
df_movie_top10 = df_movie_averageRating_desc.head(10)

## Get the film tconst in a list to find the actors in another table
list_tconst_top10 = df_movie_top10["tconst"].to_list()

## Actors having a role in the top 10 films
df_actor_top10 = df_actor.loc[df_actor[['film_1', 'film_2', 'film_3', 'film_4', 'film_5', 'film_6']].apply
                            (lambda row: row.isin(list_tconst_top10).any(), axis=1)]

## List of Actors having a role in the top 10 films
display(df_actor_top10["primaryName"].to_list())
##### 365 actors for the top 10 film, can't really use it #####

"""## Directeurs des 10 films les plus populaire"""

## List of directors from top 10 films
display(df_movie_top10["primaryName"].to_list())

display(df_movie)

